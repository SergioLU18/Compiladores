Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID EOL programa1
Rule 2     programa1 -> body END
Rule 3     programa1 -> vars body END
Rule 4     vars -> VAR ID vars1
Rule 5     vars1 -> COMMA ID vars1
Rule 6     vars1 -> COLON type
Rule 7     vars2 -> ID vars1
Rule 8     vars3 -> vars2
Rule 9     vars3 -> <empty>
Rule 10    type -> INT EOL vars3
Rule 11    type -> FLOAT EOL vars3
Rule 12    body -> LBRACKET body1 RBRACKET
Rule 13    body1 -> statement body1
Rule 14    body1 -> <empty>
Rule 15    statement -> assign
Rule 16    statement -> condition
Rule 17    statement -> cycle
Rule 18    statement -> print
Rule 19    print -> COUT LPAREN print1
Rule 20    print1 -> expression_print print2
Rule 21    print1 -> CTE_STRING print2
Rule 22    print2 -> COMMA print1
Rule 23    print2 -> RPAREN EOL
Rule 24    expression_print -> expression
Rule 25    assign -> ID EQUAL expression EOL
Rule 26    expression -> exp expression1
Rule 27    expression1 -> GREATER exp
Rule 28    expression1 -> LESS exp
Rule 29    expression1 -> NOTEQUAL exp
Rule 30    expression1 -> <empty>
Rule 31    cycle -> do_helper body WHILE LPAREN expression RPAREN EOL
Rule 32    do_helper -> DO
Rule 33    condition -> IF LPAREN expression_condition RPAREN body condition1
Rule 34    expression_condition -> expression
Rule 35    condition1 -> else_helper body EOL
Rule 36    condition1 -> EOL
Rule 37    else_helper -> ELSE
Rule 38    factor -> LPAREN expression RPAREN
Rule 39    factor -> PLUS factor1
Rule 40    factor -> MINUS factor1
Rule 41    factor -> factor1
Rule 42    factor1 -> ID
Rule 43    factor1 -> cte
Rule 44    exp -> exp1
Rule 45    exp1 -> term PLUS exp1
Rule 46    exp1 -> term MINUS exp1
Rule 47    exp1 -> term
Rule 48    term -> term1
Rule 49    term1 -> factor MULTIPLY term1
Rule 50    term1 -> factor DIVIDE term1
Rule 51    term1 -> factor
Rule 52    cte -> CTE_INT
Rule 53    cte -> CTE_FLOAT

Terminals, with rules where they appear

COLON                : 6
COMMA                : 5 22
COUT                 : 19
CTE_FLOAT            : 53
CTE_INT              : 52
CTE_STRING           : 21
DIVIDE               : 50
DO                   : 32
ELSE                 : 37
END                  : 2 3
EOL                  : 1 10 11 23 25 31 35 36
EQUAL                : 25
FLOAT                : 11
GREATER              : 27
ID                   : 1 4 5 7 25 42
IF                   : 33
INT                  : 10
LBRACKET             : 12
LESS                 : 28
LPAREN               : 19 31 33 38
MINUS                : 40 46
MULTIPLY             : 49
NOTEQUAL             : 29
PLUS                 : 39 45
PROGRAM              : 1
RBRACKET             : 12
RPAREN               : 23 31 33 38
VAR                  : 4
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

assign               : 15
body                 : 2 3 31 33 35
body1                : 12 13
condition            : 16
condition1           : 33
cte                  : 43
cycle                : 17
do_helper            : 31
else_helper          : 35
exp                  : 26 27 28 29
exp1                 : 44 45 46
expression           : 24 25 31 34 38
expression1          : 26
expression_condition : 33
expression_print     : 20
factor               : 49 50 51
factor1              : 39 40 41
print                : 18
print1               : 19 22
print2               : 20 21
programa             : 0
programa1            : 1
statement            : 13
term                 : 45 46 47
term1                : 48 49 50
type                 : 6
vars                 : 3
vars1                : 4 5 7
vars2                : 8
vars3                : 10 11

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID EOL programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID EOL programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . EOL programa1

    EOL             shift and go to state 4


state 4

    (1) programa -> PROGRAM ID EOL . programa1
    (2) programa1 -> . body END
    (3) programa1 -> . vars body END
    (12) body -> . LBRACKET body1 RBRACKET
    (4) vars -> . VAR ID vars1

    LBRACKET        shift and go to state 8
    VAR             shift and go to state 9

    programa1                      shift and go to state 5
    body                           shift and go to state 6
    vars                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID EOL programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID EOL programa1 .)


state 6

    (2) programa1 -> body . END

    END             shift and go to state 10


state 7

    (3) programa1 -> vars . body END
    (12) body -> . LBRACKET body1 RBRACKET

    LBRACKET        shift and go to state 8

    body                           shift and go to state 11

state 8

    (12) body -> LBRACKET . body1 RBRACKET
    (13) body1 -> . statement body1
    (14) body1 -> .
    (15) statement -> . assign
    (16) statement -> . condition
    (17) statement -> . cycle
    (18) statement -> . print
    (25) assign -> . ID EQUAL expression EOL
    (33) condition -> . IF LPAREN expression_condition RPAREN body condition1
    (31) cycle -> . do_helper body WHILE LPAREN expression RPAREN EOL
    (19) print -> . COUT LPAREN print1
    (32) do_helper -> . DO

    RBRACKET        reduce using rule 14 (body1 -> .)
    ID              shift and go to state 18
    IF              shift and go to state 19
    COUT            shift and go to state 21
    DO              shift and go to state 22

    body1                          shift and go to state 12
    statement                      shift and go to state 13
    assign                         shift and go to state 14
    condition                      shift and go to state 15
    cycle                          shift and go to state 16
    print                          shift and go to state 17
    do_helper                      shift and go to state 20

state 9

    (4) vars -> VAR . ID vars1

    ID              shift and go to state 23


state 10

    (2) programa1 -> body END .

    $end            reduce using rule 2 (programa1 -> body END .)


state 11

    (3) programa1 -> vars body . END

    END             shift and go to state 24


state 12

    (12) body -> LBRACKET body1 . RBRACKET

    RBRACKET        shift and go to state 25


state 13

    (13) body1 -> statement . body1
    (13) body1 -> . statement body1
    (14) body1 -> .
    (15) statement -> . assign
    (16) statement -> . condition
    (17) statement -> . cycle
    (18) statement -> . print
    (25) assign -> . ID EQUAL expression EOL
    (33) condition -> . IF LPAREN expression_condition RPAREN body condition1
    (31) cycle -> . do_helper body WHILE LPAREN expression RPAREN EOL
    (19) print -> . COUT LPAREN print1
    (32) do_helper -> . DO

    RBRACKET        reduce using rule 14 (body1 -> .)
    ID              shift and go to state 18
    IF              shift and go to state 19
    COUT            shift and go to state 21
    DO              shift and go to state 22

    statement                      shift and go to state 13
    body1                          shift and go to state 26
    assign                         shift and go to state 14
    condition                      shift and go to state 15
    cycle                          shift and go to state 16
    print                          shift and go to state 17
    do_helper                      shift and go to state 20

state 14

    (15) statement -> assign .

    ID              reduce using rule 15 (statement -> assign .)
    IF              reduce using rule 15 (statement -> assign .)
    COUT            reduce using rule 15 (statement -> assign .)
    DO              reduce using rule 15 (statement -> assign .)
    RBRACKET        reduce using rule 15 (statement -> assign .)


state 15

    (16) statement -> condition .

    ID              reduce using rule 16 (statement -> condition .)
    IF              reduce using rule 16 (statement -> condition .)
    COUT            reduce using rule 16 (statement -> condition .)
    DO              reduce using rule 16 (statement -> condition .)
    RBRACKET        reduce using rule 16 (statement -> condition .)


state 16

    (17) statement -> cycle .

    ID              reduce using rule 17 (statement -> cycle .)
    IF              reduce using rule 17 (statement -> cycle .)
    COUT            reduce using rule 17 (statement -> cycle .)
    DO              reduce using rule 17 (statement -> cycle .)
    RBRACKET        reduce using rule 17 (statement -> cycle .)


state 17

    (18) statement -> print .

    ID              reduce using rule 18 (statement -> print .)
    IF              reduce using rule 18 (statement -> print .)
    COUT            reduce using rule 18 (statement -> print .)
    DO              reduce using rule 18 (statement -> print .)
    RBRACKET        reduce using rule 18 (statement -> print .)


state 18

    (25) assign -> ID . EQUAL expression EOL

    EQUAL           shift and go to state 27


state 19

    (33) condition -> IF . LPAREN expression_condition RPAREN body condition1

    LPAREN          shift and go to state 28


state 20

    (31) cycle -> do_helper . body WHILE LPAREN expression RPAREN EOL
    (12) body -> . LBRACKET body1 RBRACKET

    LBRACKET        shift and go to state 8

    body                           shift and go to state 29

state 21

    (19) print -> COUT . LPAREN print1

    LPAREN          shift and go to state 30


state 22

    (32) do_helper -> DO .

    LBRACKET        reduce using rule 32 (do_helper -> DO .)


state 23

    (4) vars -> VAR ID . vars1
    (5) vars1 -> . COMMA ID vars1
    (6) vars1 -> . COLON type

    COMMA           shift and go to state 32
    COLON           shift and go to state 33

    vars1                          shift and go to state 31

state 24

    (3) programa1 -> vars body END .

    $end            reduce using rule 3 (programa1 -> vars body END .)


state 25

    (12) body -> LBRACKET body1 RBRACKET .

    END             reduce using rule 12 (body -> LBRACKET body1 RBRACKET .)
    WHILE           reduce using rule 12 (body -> LBRACKET body1 RBRACKET .)
    EOL             reduce using rule 12 (body -> LBRACKET body1 RBRACKET .)
    ELSE            reduce using rule 12 (body -> LBRACKET body1 RBRACKET .)


state 26

    (13) body1 -> statement body1 .

    RBRACKET        reduce using rule 13 (body1 -> statement body1 .)


state 27

    (25) assign -> ID EQUAL . expression EOL
    (26) expression -> . exp expression1
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    expression                     shift and go to state 35
    exp                            shift and go to state 36
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 28

    (33) condition -> IF LPAREN . expression_condition RPAREN body condition1
    (34) expression_condition -> . expression
    (26) expression -> . exp expression1
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    expression_condition           shift and go to state 48
    expression                     shift and go to state 49
    exp                            shift and go to state 36
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 29

    (31) cycle -> do_helper body . WHILE LPAREN expression RPAREN EOL

    WHILE           shift and go to state 50


state 30

    (19) print -> COUT LPAREN . print1
    (20) print1 -> . expression_print print2
    (21) print1 -> . CTE_STRING print2
    (24) expression_print -> . expression
    (26) expression -> . exp expression1
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 53
    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    print1                         shift and go to state 51
    expression_print               shift and go to state 52
    expression                     shift and go to state 54
    exp                            shift and go to state 36
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 31

    (4) vars -> VAR ID vars1 .

    LBRACKET        reduce using rule 4 (vars -> VAR ID vars1 .)


state 32

    (5) vars1 -> COMMA . ID vars1

    ID              shift and go to state 55


state 33

    (6) vars1 -> COLON . type
    (10) type -> . INT EOL vars3
    (11) type -> . FLOAT EOL vars3

    INT             shift and go to state 57
    FLOAT           shift and go to state 58

    type                           shift and go to state 56

state 34

    (42) factor1 -> ID .

    MULTIPLY        reduce using rule 42 (factor1 -> ID .)
    DIVIDE          reduce using rule 42 (factor1 -> ID .)
    PLUS            reduce using rule 42 (factor1 -> ID .)
    MINUS           reduce using rule 42 (factor1 -> ID .)
    GREATER         reduce using rule 42 (factor1 -> ID .)
    LESS            reduce using rule 42 (factor1 -> ID .)
    NOTEQUAL        reduce using rule 42 (factor1 -> ID .)
    EOL             reduce using rule 42 (factor1 -> ID .)
    RPAREN          reduce using rule 42 (factor1 -> ID .)
    COMMA           reduce using rule 42 (factor1 -> ID .)


state 35

    (25) assign -> ID EQUAL expression . EOL

    EOL             shift and go to state 59


state 36

    (26) expression -> exp . expression1
    (27) expression1 -> . GREATER exp
    (28) expression1 -> . LESS exp
    (29) expression1 -> . NOTEQUAL exp
    (30) expression1 -> .

    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    NOTEQUAL        shift and go to state 63
    EOL             reduce using rule 30 (expression1 -> .)
    RPAREN          reduce using rule 30 (expression1 -> .)
    COMMA           reduce using rule 30 (expression1 -> .)

    expression1                    shift and go to state 60

state 37

    (44) exp -> exp1 .

    GREATER         reduce using rule 44 (exp -> exp1 .)
    LESS            reduce using rule 44 (exp -> exp1 .)
    NOTEQUAL        reduce using rule 44 (exp -> exp1 .)
    EOL             reduce using rule 44 (exp -> exp1 .)
    RPAREN          reduce using rule 44 (exp -> exp1 .)
    COMMA           reduce using rule 44 (exp -> exp1 .)


state 38

    (45) exp1 -> term . PLUS exp1
    (46) exp1 -> term . MINUS exp1
    (47) exp1 -> term .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    GREATER         reduce using rule 47 (exp1 -> term .)
    LESS            reduce using rule 47 (exp1 -> term .)
    NOTEQUAL        reduce using rule 47 (exp1 -> term .)
    EOL             reduce using rule 47 (exp1 -> term .)
    RPAREN          reduce using rule 47 (exp1 -> term .)
    COMMA           reduce using rule 47 (exp1 -> term .)


state 39

    (39) factor -> PLUS . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    factor1                        shift and go to state 66
    cte                            shift and go to state 45

state 40

    (40) factor -> MINUS . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    factor1                        shift and go to state 67
    cte                            shift and go to state 45

state 41

    (48) term -> term1 .

    PLUS            reduce using rule 48 (term -> term1 .)
    MINUS           reduce using rule 48 (term -> term1 .)
    GREATER         reduce using rule 48 (term -> term1 .)
    LESS            reduce using rule 48 (term -> term1 .)
    NOTEQUAL        reduce using rule 48 (term -> term1 .)
    EOL             reduce using rule 48 (term -> term1 .)
    RPAREN          reduce using rule 48 (term -> term1 .)
    COMMA           reduce using rule 48 (term -> term1 .)


state 42

    (49) term1 -> factor . MULTIPLY term1
    (50) term1 -> factor . DIVIDE term1
    (51) term1 -> factor .

    MULTIPLY        shift and go to state 68
    DIVIDE          shift and go to state 69
    PLUS            reduce using rule 51 (term1 -> factor .)
    MINUS           reduce using rule 51 (term1 -> factor .)
    GREATER         reduce using rule 51 (term1 -> factor .)
    LESS            reduce using rule 51 (term1 -> factor .)
    NOTEQUAL        reduce using rule 51 (term1 -> factor .)
    EOL             reduce using rule 51 (term1 -> factor .)
    RPAREN          reduce using rule 51 (term1 -> factor .)
    COMMA           reduce using rule 51 (term1 -> factor .)


state 43

    (38) factor -> LPAREN . expression RPAREN
    (26) expression -> . exp expression1
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    expression                     shift and go to state 70
    exp                            shift and go to state 36
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 44

    (41) factor -> factor1 .

    MULTIPLY        reduce using rule 41 (factor -> factor1 .)
    DIVIDE          reduce using rule 41 (factor -> factor1 .)
    PLUS            reduce using rule 41 (factor -> factor1 .)
    MINUS           reduce using rule 41 (factor -> factor1 .)
    GREATER         reduce using rule 41 (factor -> factor1 .)
    LESS            reduce using rule 41 (factor -> factor1 .)
    NOTEQUAL        reduce using rule 41 (factor -> factor1 .)
    EOL             reduce using rule 41 (factor -> factor1 .)
    RPAREN          reduce using rule 41 (factor -> factor1 .)
    COMMA           reduce using rule 41 (factor -> factor1 .)


state 45

    (43) factor1 -> cte .

    MULTIPLY        reduce using rule 43 (factor1 -> cte .)
    DIVIDE          reduce using rule 43 (factor1 -> cte .)
    PLUS            reduce using rule 43 (factor1 -> cte .)
    MINUS           reduce using rule 43 (factor1 -> cte .)
    GREATER         reduce using rule 43 (factor1 -> cte .)
    LESS            reduce using rule 43 (factor1 -> cte .)
    NOTEQUAL        reduce using rule 43 (factor1 -> cte .)
    EOL             reduce using rule 43 (factor1 -> cte .)
    RPAREN          reduce using rule 43 (factor1 -> cte .)
    COMMA           reduce using rule 43 (factor1 -> cte .)


state 46

    (52) cte -> CTE_INT .

    MULTIPLY        reduce using rule 52 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 52 (cte -> CTE_INT .)
    PLUS            reduce using rule 52 (cte -> CTE_INT .)
    MINUS           reduce using rule 52 (cte -> CTE_INT .)
    GREATER         reduce using rule 52 (cte -> CTE_INT .)
    LESS            reduce using rule 52 (cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 52 (cte -> CTE_INT .)
    EOL             reduce using rule 52 (cte -> CTE_INT .)
    RPAREN          reduce using rule 52 (cte -> CTE_INT .)
    COMMA           reduce using rule 52 (cte -> CTE_INT .)


state 47

    (53) cte -> CTE_FLOAT .

    MULTIPLY        reduce using rule 53 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 53 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 53 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 53 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 53 (cte -> CTE_FLOAT .)
    LESS            reduce using rule 53 (cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 53 (cte -> CTE_FLOAT .)
    EOL             reduce using rule 53 (cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 53 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 53 (cte -> CTE_FLOAT .)


state 48

    (33) condition -> IF LPAREN expression_condition . RPAREN body condition1

    RPAREN          shift and go to state 71


state 49

    (34) expression_condition -> expression .

    RPAREN          reduce using rule 34 (expression_condition -> expression .)


state 50

    (31) cycle -> do_helper body WHILE . LPAREN expression RPAREN EOL

    LPAREN          shift and go to state 72


state 51

    (19) print -> COUT LPAREN print1 .

    ID              reduce using rule 19 (print -> COUT LPAREN print1 .)
    IF              reduce using rule 19 (print -> COUT LPAREN print1 .)
    COUT            reduce using rule 19 (print -> COUT LPAREN print1 .)
    DO              reduce using rule 19 (print -> COUT LPAREN print1 .)
    RBRACKET        reduce using rule 19 (print -> COUT LPAREN print1 .)


state 52

    (20) print1 -> expression_print . print2
    (22) print2 -> . COMMA print1
    (23) print2 -> . RPAREN EOL

    COMMA           shift and go to state 74
    RPAREN          shift and go to state 75

    print2                         shift and go to state 73

state 53

    (21) print1 -> CTE_STRING . print2
    (22) print2 -> . COMMA print1
    (23) print2 -> . RPAREN EOL

    COMMA           shift and go to state 74
    RPAREN          shift and go to state 75

    print2                         shift and go to state 76

state 54

    (24) expression_print -> expression .

    COMMA           reduce using rule 24 (expression_print -> expression .)
    RPAREN          reduce using rule 24 (expression_print -> expression .)


state 55

    (5) vars1 -> COMMA ID . vars1
    (5) vars1 -> . COMMA ID vars1
    (6) vars1 -> . COLON type

    COMMA           shift and go to state 32
    COLON           shift and go to state 33

    vars1                          shift and go to state 77

state 56

    (6) vars1 -> COLON type .

    LBRACKET        reduce using rule 6 (vars1 -> COLON type .)


state 57

    (10) type -> INT . EOL vars3

    EOL             shift and go to state 78


state 58

    (11) type -> FLOAT . EOL vars3

    EOL             shift and go to state 79


state 59

    (25) assign -> ID EQUAL expression EOL .

    ID              reduce using rule 25 (assign -> ID EQUAL expression EOL .)
    IF              reduce using rule 25 (assign -> ID EQUAL expression EOL .)
    COUT            reduce using rule 25 (assign -> ID EQUAL expression EOL .)
    DO              reduce using rule 25 (assign -> ID EQUAL expression EOL .)
    RBRACKET        reduce using rule 25 (assign -> ID EQUAL expression EOL .)


state 60

    (26) expression -> exp expression1 .

    EOL             reduce using rule 26 (expression -> exp expression1 .)
    RPAREN          reduce using rule 26 (expression -> exp expression1 .)
    COMMA           reduce using rule 26 (expression -> exp expression1 .)


state 61

    (27) expression1 -> GREATER . exp
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    exp                            shift and go to state 80
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 62

    (28) expression1 -> LESS . exp
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    exp                            shift and go to state 81
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 63

    (29) expression1 -> NOTEQUAL . exp
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    exp                            shift and go to state 82
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 64

    (45) exp1 -> term PLUS . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    term                           shift and go to state 38
    exp1                           shift and go to state 83
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 65

    (46) exp1 -> term MINUS . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    term                           shift and go to state 38
    exp1                           shift and go to state 84
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 66

    (39) factor -> PLUS factor1 .

    MULTIPLY        reduce using rule 39 (factor -> PLUS factor1 .)
    DIVIDE          reduce using rule 39 (factor -> PLUS factor1 .)
    PLUS            reduce using rule 39 (factor -> PLUS factor1 .)
    MINUS           reduce using rule 39 (factor -> PLUS factor1 .)
    GREATER         reduce using rule 39 (factor -> PLUS factor1 .)
    LESS            reduce using rule 39 (factor -> PLUS factor1 .)
    NOTEQUAL        reduce using rule 39 (factor -> PLUS factor1 .)
    EOL             reduce using rule 39 (factor -> PLUS factor1 .)
    RPAREN          reduce using rule 39 (factor -> PLUS factor1 .)
    COMMA           reduce using rule 39 (factor -> PLUS factor1 .)


state 67

    (40) factor -> MINUS factor1 .

    MULTIPLY        reduce using rule 40 (factor -> MINUS factor1 .)
    DIVIDE          reduce using rule 40 (factor -> MINUS factor1 .)
    PLUS            reduce using rule 40 (factor -> MINUS factor1 .)
    MINUS           reduce using rule 40 (factor -> MINUS factor1 .)
    GREATER         reduce using rule 40 (factor -> MINUS factor1 .)
    LESS            reduce using rule 40 (factor -> MINUS factor1 .)
    NOTEQUAL        reduce using rule 40 (factor -> MINUS factor1 .)
    EOL             reduce using rule 40 (factor -> MINUS factor1 .)
    RPAREN          reduce using rule 40 (factor -> MINUS factor1 .)
    COMMA           reduce using rule 40 (factor -> MINUS factor1 .)


state 68

    (49) term1 -> factor MULTIPLY . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    factor                         shift and go to state 42
    term1                          shift and go to state 85
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 69

    (50) term1 -> factor DIVIDE . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    factor                         shift and go to state 42
    term1                          shift and go to state 86
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 70

    (38) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 87


state 71

    (33) condition -> IF LPAREN expression_condition RPAREN . body condition1
    (12) body -> . LBRACKET body1 RBRACKET

    LBRACKET        shift and go to state 8

    body                           shift and go to state 88

state 72

    (31) cycle -> do_helper body WHILE LPAREN . expression RPAREN EOL
    (26) expression -> . exp expression1
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    expression                     shift and go to state 89
    exp                            shift and go to state 36
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 73

    (20) print1 -> expression_print print2 .

    ID              reduce using rule 20 (print1 -> expression_print print2 .)
    IF              reduce using rule 20 (print1 -> expression_print print2 .)
    COUT            reduce using rule 20 (print1 -> expression_print print2 .)
    DO              reduce using rule 20 (print1 -> expression_print print2 .)
    RBRACKET        reduce using rule 20 (print1 -> expression_print print2 .)


state 74

    (22) print2 -> COMMA . print1
    (20) print1 -> . expression_print print2
    (21) print1 -> . CTE_STRING print2
    (24) expression_print -> . expression
    (26) expression -> . exp expression1
    (44) exp -> . exp1
    (45) exp1 -> . term PLUS exp1
    (46) exp1 -> . term MINUS exp1
    (47) exp1 -> . term
    (48) term -> . term1
    (49) term1 -> . factor MULTIPLY term1
    (50) term1 -> . factor DIVIDE term1
    (51) term1 -> . factor
    (38) factor -> . LPAREN expression RPAREN
    (39) factor -> . PLUS factor1
    (40) factor -> . MINUS factor1
    (41) factor -> . factor1
    (42) factor1 -> . ID
    (43) factor1 -> . cte
    (52) cte -> . CTE_INT
    (53) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 53
    LPAREN          shift and go to state 43
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 34
    CTE_INT         shift and go to state 46
    CTE_FLOAT       shift and go to state 47

    print1                         shift and go to state 90
    expression_print               shift and go to state 52
    expression                     shift and go to state 54
    exp                            shift and go to state 36
    exp1                           shift and go to state 37
    term                           shift and go to state 38
    term1                          shift and go to state 41
    factor                         shift and go to state 42
    factor1                        shift and go to state 44
    cte                            shift and go to state 45

state 75

    (23) print2 -> RPAREN . EOL

    EOL             shift and go to state 91


state 76

    (21) print1 -> CTE_STRING print2 .

    ID              reduce using rule 21 (print1 -> CTE_STRING print2 .)
    IF              reduce using rule 21 (print1 -> CTE_STRING print2 .)
    COUT            reduce using rule 21 (print1 -> CTE_STRING print2 .)
    DO              reduce using rule 21 (print1 -> CTE_STRING print2 .)
    RBRACKET        reduce using rule 21 (print1 -> CTE_STRING print2 .)


state 77

    (5) vars1 -> COMMA ID vars1 .

    LBRACKET        reduce using rule 5 (vars1 -> COMMA ID vars1 .)


state 78

    (10) type -> INT EOL . vars3
    (8) vars3 -> . vars2
    (9) vars3 -> .
    (7) vars2 -> . ID vars1

    LBRACKET        reduce using rule 9 (vars3 -> .)
    ID              shift and go to state 94

    vars3                          shift and go to state 92
    vars2                          shift and go to state 93

state 79

    (11) type -> FLOAT EOL . vars3
    (8) vars3 -> . vars2
    (9) vars3 -> .
    (7) vars2 -> . ID vars1

    LBRACKET        reduce using rule 9 (vars3 -> .)
    ID              shift and go to state 94

    vars3                          shift and go to state 95
    vars2                          shift and go to state 93

state 80

    (27) expression1 -> GREATER exp .

    EOL             reduce using rule 27 (expression1 -> GREATER exp .)
    RPAREN          reduce using rule 27 (expression1 -> GREATER exp .)
    COMMA           reduce using rule 27 (expression1 -> GREATER exp .)


state 81

    (28) expression1 -> LESS exp .

    EOL             reduce using rule 28 (expression1 -> LESS exp .)
    RPAREN          reduce using rule 28 (expression1 -> LESS exp .)
    COMMA           reduce using rule 28 (expression1 -> LESS exp .)


state 82

    (29) expression1 -> NOTEQUAL exp .

    EOL             reduce using rule 29 (expression1 -> NOTEQUAL exp .)
    RPAREN          reduce using rule 29 (expression1 -> NOTEQUAL exp .)
    COMMA           reduce using rule 29 (expression1 -> NOTEQUAL exp .)


state 83

    (45) exp1 -> term PLUS exp1 .

    GREATER         reduce using rule 45 (exp1 -> term PLUS exp1 .)
    LESS            reduce using rule 45 (exp1 -> term PLUS exp1 .)
    NOTEQUAL        reduce using rule 45 (exp1 -> term PLUS exp1 .)
    EOL             reduce using rule 45 (exp1 -> term PLUS exp1 .)
    RPAREN          reduce using rule 45 (exp1 -> term PLUS exp1 .)
    COMMA           reduce using rule 45 (exp1 -> term PLUS exp1 .)


state 84

    (46) exp1 -> term MINUS exp1 .

    GREATER         reduce using rule 46 (exp1 -> term MINUS exp1 .)
    LESS            reduce using rule 46 (exp1 -> term MINUS exp1 .)
    NOTEQUAL        reduce using rule 46 (exp1 -> term MINUS exp1 .)
    EOL             reduce using rule 46 (exp1 -> term MINUS exp1 .)
    RPAREN          reduce using rule 46 (exp1 -> term MINUS exp1 .)
    COMMA           reduce using rule 46 (exp1 -> term MINUS exp1 .)


state 85

    (49) term1 -> factor MULTIPLY term1 .

    PLUS            reduce using rule 49 (term1 -> factor MULTIPLY term1 .)
    MINUS           reduce using rule 49 (term1 -> factor MULTIPLY term1 .)
    GREATER         reduce using rule 49 (term1 -> factor MULTIPLY term1 .)
    LESS            reduce using rule 49 (term1 -> factor MULTIPLY term1 .)
    NOTEQUAL        reduce using rule 49 (term1 -> factor MULTIPLY term1 .)
    EOL             reduce using rule 49 (term1 -> factor MULTIPLY term1 .)
    RPAREN          reduce using rule 49 (term1 -> factor MULTIPLY term1 .)
    COMMA           reduce using rule 49 (term1 -> factor MULTIPLY term1 .)


state 86

    (50) term1 -> factor DIVIDE term1 .

    PLUS            reduce using rule 50 (term1 -> factor DIVIDE term1 .)
    MINUS           reduce using rule 50 (term1 -> factor DIVIDE term1 .)
    GREATER         reduce using rule 50 (term1 -> factor DIVIDE term1 .)
    LESS            reduce using rule 50 (term1 -> factor DIVIDE term1 .)
    NOTEQUAL        reduce using rule 50 (term1 -> factor DIVIDE term1 .)
    EOL             reduce using rule 50 (term1 -> factor DIVIDE term1 .)
    RPAREN          reduce using rule 50 (term1 -> factor DIVIDE term1 .)
    COMMA           reduce using rule 50 (term1 -> factor DIVIDE term1 .)


state 87

    (38) factor -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    EOL             reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 38 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 38 (factor -> LPAREN expression RPAREN .)


state 88

    (33) condition -> IF LPAREN expression_condition RPAREN body . condition1
    (35) condition1 -> . else_helper body EOL
    (36) condition1 -> . EOL
    (37) else_helper -> . ELSE

    EOL             shift and go to state 98
    ELSE            shift and go to state 99

    condition1                     shift and go to state 96
    else_helper                    shift and go to state 97

state 89

    (31) cycle -> do_helper body WHILE LPAREN expression . RPAREN EOL

    RPAREN          shift and go to state 100


state 90

    (22) print2 -> COMMA print1 .

    ID              reduce using rule 22 (print2 -> COMMA print1 .)
    IF              reduce using rule 22 (print2 -> COMMA print1 .)
    COUT            reduce using rule 22 (print2 -> COMMA print1 .)
    DO              reduce using rule 22 (print2 -> COMMA print1 .)
    RBRACKET        reduce using rule 22 (print2 -> COMMA print1 .)


state 91

    (23) print2 -> RPAREN EOL .

    ID              reduce using rule 23 (print2 -> RPAREN EOL .)
    IF              reduce using rule 23 (print2 -> RPAREN EOL .)
    COUT            reduce using rule 23 (print2 -> RPAREN EOL .)
    DO              reduce using rule 23 (print2 -> RPAREN EOL .)
    RBRACKET        reduce using rule 23 (print2 -> RPAREN EOL .)


state 92

    (10) type -> INT EOL vars3 .

    LBRACKET        reduce using rule 10 (type -> INT EOL vars3 .)


state 93

    (8) vars3 -> vars2 .

    LBRACKET        reduce using rule 8 (vars3 -> vars2 .)


state 94

    (7) vars2 -> ID . vars1
    (5) vars1 -> . COMMA ID vars1
    (6) vars1 -> . COLON type

    COMMA           shift and go to state 32
    COLON           shift and go to state 33

    vars1                          shift and go to state 101

state 95

    (11) type -> FLOAT EOL vars3 .

    LBRACKET        reduce using rule 11 (type -> FLOAT EOL vars3 .)


state 96

    (33) condition -> IF LPAREN expression_condition RPAREN body condition1 .

    ID              reduce using rule 33 (condition -> IF LPAREN expression_condition RPAREN body condition1 .)
    IF              reduce using rule 33 (condition -> IF LPAREN expression_condition RPAREN body condition1 .)
    COUT            reduce using rule 33 (condition -> IF LPAREN expression_condition RPAREN body condition1 .)
    DO              reduce using rule 33 (condition -> IF LPAREN expression_condition RPAREN body condition1 .)
    RBRACKET        reduce using rule 33 (condition -> IF LPAREN expression_condition RPAREN body condition1 .)


state 97

    (35) condition1 -> else_helper . body EOL
    (12) body -> . LBRACKET body1 RBRACKET

    LBRACKET        shift and go to state 8

    body                           shift and go to state 102

state 98

    (36) condition1 -> EOL .

    ID              reduce using rule 36 (condition1 -> EOL .)
    IF              reduce using rule 36 (condition1 -> EOL .)
    COUT            reduce using rule 36 (condition1 -> EOL .)
    DO              reduce using rule 36 (condition1 -> EOL .)
    RBRACKET        reduce using rule 36 (condition1 -> EOL .)


state 99

    (37) else_helper -> ELSE .

    LBRACKET        reduce using rule 37 (else_helper -> ELSE .)


state 100

    (31) cycle -> do_helper body WHILE LPAREN expression RPAREN . EOL

    EOL             shift and go to state 103


state 101

    (7) vars2 -> ID vars1 .

    LBRACKET        reduce using rule 7 (vars2 -> ID vars1 .)


state 102

    (35) condition1 -> else_helper body . EOL

    EOL             shift and go to state 104


state 103

    (31) cycle -> do_helper body WHILE LPAREN expression RPAREN EOL .

    ID              reduce using rule 31 (cycle -> do_helper body WHILE LPAREN expression RPAREN EOL .)
    IF              reduce using rule 31 (cycle -> do_helper body WHILE LPAREN expression RPAREN EOL .)
    COUT            reduce using rule 31 (cycle -> do_helper body WHILE LPAREN expression RPAREN EOL .)
    DO              reduce using rule 31 (cycle -> do_helper body WHILE LPAREN expression RPAREN EOL .)
    RBRACKET        reduce using rule 31 (cycle -> do_helper body WHILE LPAREN expression RPAREN EOL .)


state 104

    (35) condition1 -> else_helper body EOL .

    ID              reduce using rule 35 (condition1 -> else_helper body EOL .)
    IF              reduce using rule 35 (condition1 -> else_helper body EOL .)
    COUT            reduce using rule 35 (condition1 -> else_helper body EOL .)
    DO              reduce using rule 35 (condition1 -> else_helper body EOL .)
    RBRACKET        reduce using rule 35 (condition1 -> else_helper body EOL .)

